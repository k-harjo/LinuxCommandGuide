echo - Display message on screen, writes each given STRING to standard output, with a space between each and a newline after the last one.


Syntax

     echo [options]... [String]...


Options

   -n   Do not output a trailing newline.

   -E   Disable the interpretation of the following backslash-escaped characters.

   -e   Enable interpretation of the following backslash-escaped characters in each String:

      \a    Alert (bell)
      \b    Backspace
      \c    Suppress trailing newline
      \e    Escape
      \E    Escape 
      \f    Form feed
      \n    New line
      \r    Carriage return
      \t    Horizontal tab
      \v    Vertical tab
      \\    Backslash
      \0nnn   The eight-bit character whose value is the octal value nnn (zero to three octal digits) 
              if nnn is not a valid octal number, it is printed literally.
      \xHH    The eight-bit character whose value is the hex value HH (one or two hex digits) 
      \uHHHH    The Unicode (ISO/IEC 10646) character whose value is the hex value HHHH (one to four hex digits)
      \UHHHHHHHH  The Unicode (ISO/IEC 10646) character whose value is the hex value HHHHHHHH (one to eight hex digits) 
This is a BASH shell builtin, to display your local syntax from the bash prompt type: help echo
There is also an echo utility (man echo) , but the shell built-in version will generally take precedence.


Examples

echo "Hello World"

DEMO=Testing123
echo "$DEMO"
# Testing123

echo "with quotes we can echo
several lines at a time"


Echo can also display in color by using Escape sequences for foreground (30..37) and background (40..47) colours.

$ COL_BLUE="\x1b[34;01m"
$ COL_RESET="\x1b[39;49;00m"
$ echo -e $COL_BLUE"Important Message: "$COL_RESET"This is a message"


Here is a shell script to display all the color combinations:

 #!/bin/bash
 #
 echo ---Bg---40---41---42---43---44---45---46---47
 for i in {30..37} # foreground
 do
 echo -n -e fg$i- 
 for j in {40..47} # background
 do
 echo -n -e '\E['$i';'$j'm SS64'
 tput sgr0 # Reset text attributes to normal without clear
 done
 echo # newline
 done
 
 echo -- Clear BG --
 for n in {30..37} # foreground
 do
 echo -e fg$n '\E['$n';'01'm SS64'
 tput sgr0 # Reset text attributes to normal without clear
 done


*See also: head, less, more, notify-send, pg, tee