expr - it evaluates a given expression and displays its corresponding output.  

	Basic operations like addition, subtraction, multiplication, division, and modulus on integers. 

	Evaluating regular expressions, string operations like substring, length of strings etc. 


Syntax

      expr expression
      expr option


Key

   --help      Display help and exit
   --version   output version information and exit

Expressions:

   ARG1 | ARG2               ARG1 if it is neither null nor 0, otherwise ARG2 
   ARG1 & ARG2               ARG1 if neither argument is null or 0, otherwise 0 
   ARG1 < ARG2               ARG1 is less than ARG2 
   ARG1 <= ARG2              ARG1 is less than or equal to ARG2 
   ARG1 = ARG2               ARG1 is equal to ARG2 
   ARG1 != ARG2              ARG1 is unequal to ARG2 
   ARG1 >= ARG2              ARG1 is greater than or equal to ARG2 
   ARG1 > ARG2               ARG1 is greater than ARG2 
   ARG1 + ARG2               Arithmetic sum of ARG1 and ARG2 
   ARG1 - ARG2               Arithmetic difference of ARG1 and ARG2 
   ARG1 * ARG2               Arithmetic product of ARG1 and ARG2 
   ARG1 / ARG2               Arithmetic quotient of ARG1 divided by ARG2 
   ARG1 % ARG2               Arithmetic remainder of ARG1 divided by ARG2 
   STRING : REGEXP           Anchored pattern match of REGEXP in STRING 
   match STRING REGEXP       Same as STRING : REGEXP 
   substr STRING POS LENGTH  Substring of STRING, POS counted from 1 
   index STRING CHARS        Index in STRING where any CHARS is found, or 0 
   length STRING             Length of STRING 
   + TOKEN                   Interpret TOKEN as a string, even if it is a 
                             keyword like 'match' or an operator like '/'
   ( EXPRESSION )            Value of EXPRESSION

Beware that many operators need to be escaped or quoted for shells.


Examples

$expr --version 
image001

$expr --help 
image002


*See also: eval, for, function, gawk, test