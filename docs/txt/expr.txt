expr - Evaluate expressions, evaluates an expression and writes the result on standard output. A blank line below separates increasing precedence groups.


Syntax

      expr expression
      expr option


Options:

   --help      Display help and exit
   --version   output version information and exit


Expressions:

   ARG1 | ARG2               ARG1 if it is neither null nor 0, otherwise ARG2 
   ARG1 & ARG2               ARG1 if neither argument is null or 0, otherwise 0 
   ARG1 < ARG2               ARG1 is less than ARG2 
   ARG1 <= ARG2              ARG1 is less than or equal to ARG2 
   ARG1 = ARG2               ARG1 is equal to ARG2 
   ARG1 != ARG2              ARG1 is unequal to ARG2 
   ARG1 >= ARG2              ARG1 is greater than or equal to ARG2 
   ARG1 > ARG2               ARG1 is greater than ARG2 
   ARG1 + ARG2               Arithmetic sum of ARG1 and ARG2 
   ARG1 - ARG2               Arithmetic difference of ARG1 and ARG2 
   ARG1 * ARG2               Arithmetic product of ARG1 and ARG2 
   ARG1 / ARG2               Arithmetic quotient of ARG1 divided by ARG2 
   ARG1 % ARG2               Arithmetic remainder of ARG1 divided by ARG2 
   STRING : REGEXP           Anchored pattern match of REGEXP in STRING 
   match STRING REGEXP       Same as STRING : REGEXP 
   substr STRING POS LENGTH  Substring of STRING, POS counted from 1 
   index STRING CHARS        Index in STRING where any CHARS is found, or 0 
   length STRING             Length of STRING 
   + TOKEN                   Interpret TOKEN as a string, even if it is a 
                             keyword like 'match' or an operator like '/'
   ( EXPRESSION )            Value of EXPRESSION
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else lexicographical.
Pattern matches return the string matched between \( and \) or null;
if \( and \) are not used, they return the number of characters matched or 0.
Exit status 
 0 if EXPRESSION is neither null nor 0,
 1 if EXPRESSION is null or 0,
 2 if EXPRESSION is syntactically invalid, 
 3 if an error occurred. 
Each token of the expression must be a separate argument.

Operands are either numbers or strings. 'expr' coerces anything appearing in an operand position to an integer or a string depending on the operation being applied to it.

Strings are not quoted for 'expr' itself, though you might need to quote them to protect characters with special meaning to the shell, e.g., spaces.

Operators can be given as infix symbols or prefix keywords. Parentheses may be used for grouping in the usual manner (you must quote parentheses to avoid the shell evaluating them, however).
String expressions
'expr' supports pattern matching and other string operators. These have lower precedence than both the numeric and relational operators (in the next sections).

STRING : REGEX
     Perform pattern matching.  The arguments are coerced to strings
     and the second is considered to be a (basic, a la GNU 'grep')
     regular expression, with a '^' implicitly prepended.  The first
     argument is then matched against this regular expression.

     If the match succeeds and REGEX uses '\(' and '\)', the ':'
     expression returns the part of STRING that matched the
     subexpression; otherwise, it returns the number of characters
     matched.

     If the match fails, the ':' operator returns the null string if
     '\(' and '\)' are used in REGEX, otherwise 0.

     Only the first '\( ... \)' pair is relevant to the return value;
     additional pairs are meaningful only for grouping the regular
     expression operators.

     In the regular expression, '\+', '\?', and '\|' are operators
     which respectively match one or more, zero or one, or separate
     alternatives.  SunOS and other 'expr''s treat these as regular
     characters.  (POSIX allows either behavior.)

match STRING REGEX
     An alternative way to do pattern matching.  This is the same as
     STRING : REGEX.

substr STRING POSITION LENGTH
     Returns the substring of STRING beginning at POSITION with length
     at most LENGTH.  If either POSITION or LENGTH is negative, zero,
     or non-numeric, returns the null string.

index STRING CHARSET
     Returns the first position in STRING where the first character in
     CHARSET was found.  If no character in CHARSET is found in STRING,
     return 0.

length STRING
     Returns the length of STRING.

quote TOKEN
     Interpret TOKEN as a string, even if it is a keyword like MATCH or
     an operator like /.  This makes it possible to test 'expr length
     quote "$x"' or 'expr quote "$x" : '.*/\(.\)'' and have it do the
     right thing even if the value of $X happens to be (for example)
     '/' or 'index'.  This operator is a GNU extension.  It is disabled
     when the environment variable 'POSIXLY_CORRECT' is set.


To make 'expr' interpret keywords as strings, you must use the
'quote' operator.
Numeric expressions
'expr' supports the usual numeric operators, in order of increasing precedence. The string operators (previous section) have lower precedence, the connectives (next section) have higher.
+ - Addition and subtraction. Both arguments are coerced to numbers; an error occurs if this cannot be done.

* / % Multiplication, division, remainder. Both arguments are coerced to numbers; an error occurs if this cannot be done.

Relations for 'expr'
'expr' supports the usual logical connectives and relations. These are higher precedence than either the string or numeric operators (previous sections). Here is the list, lowest-precedence operator first.
| Returns its first argument if that is neither null nor 0, otherwise its second argument.

& Return its first argument if neither argument is null or 0, otherwise 0.

< <= = == != >= >
Compare the arguments and return 1 if the relation is true, 0 otherwise. '==' is a synonym for '='. 'expr' first tries to
coerce both arguments to numbers and do a numeric comparison; if either coercion fails, it does a lexicographic comparison.

Examples
# A partial match will return the number of characters that match:
$ expr ss64 : ss6
3

# The condition in string 2 must entirely match string 1
$ expr ss64 : ss7
0

# Adding numbers
$ expr 5 + 2
7

# When multiplying the * has to be escaped
$ expr 5 \* 3
15

# Incrementing a variable (arithmetic expansion)
$ DEMO=1
$ DEMO='expr $DEMO + 1'
$ echo $DEMO
2
$ DEMO='expr $DEMO + 1'
$ echo $DEMO
3

# To print the non-directory part of the file name stored in '$FNAME,
  which need not contain a '/'.
$ expr $FNAME : '.*/\(^.*\)' '^|' $FNAME

$ expr abc : 'a\(.\)c'
b

$ expr index abcdef cz
3

$ expr index index a
expr: syntax error

$ expr index quote index a
0


*See also: eval, for, function, gawk, test